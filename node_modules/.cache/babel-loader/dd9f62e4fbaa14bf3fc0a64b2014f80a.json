{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\alini\\\\Documents\\\\repository\\\\blog-reactjs-lini\\\\src\\\\components\\\\chatbot-widget\\\\messages-input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst sendRasaPost = async (message, sendMessage) => {\n  const requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      message: message,\n      sender: 123\n    })\n  };\n\n  try {\n    const response = await fetch('https://kiki-assistant.herokuapp.com/webhooks/rest/webhook', requestOptions);\n    const data = await response.json();\n    await new Promise(resolve => setTimeout(resolve, 3000));\n    console.log(data[0]);\n\n    for (var i = 0; i < data.length; i++) {\n      sendMessage({\n        message: data[i].text,\n        event: 'bot'\n      });\n    }\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst WidgetMessage = _ref => {\n  _s();\n\n  let {\n    sendMessage\n  } = _ref;\n  // Recebe o objeto e o método que altera o valor do objeto\n  const [message, setMessage] = useState(''); // useCallback cacheia a função e se atualiza quando os elementos\n  // passados na última propriedade, alteram de estado.\n\n  const submitMessage = useCallback(() => {\n    sendMessage({\n      message: message,\n      event: 'user'\n    });\n    sendRasaPost(message, sendMessage);\n    setMessage('');\n  }, [message, sendMessage]);\n  const handleChange = useCallback(event => {\n    const received_message = event.target.value;\n    setMessage(received_message);\n  }, []);\n  const handleKeyPress = useCallback(event => {\n    if (event.key === 'Enter') {\n      submitMessage();\n    }\n  }, [submitMessage]);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"navbar navbar-expand-md keypad\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navbar-left\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"usrInput\",\n        name: \"received_message\",\n        id: \"userInput\",\n        autoComplete: \"off\",\n        placeholder: \"Escreva uma mensagem...\",\n        onChange: handleChange,\n        onKeyPress: handleKeyPress,\n        value: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"send_button\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"navbar-nav ml-auto\",\n        children: /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"nav-item\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: submitMessage,\n            className: \"fa fa-paper-plane\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 7\n  }, this);\n};\n\n_s(WidgetMessage, \"DMk4MGQFHYPH7MB4hCKP1sRblNw=\");\n\n_c = WidgetMessage;\nexport default WidgetMessage;\n\nvar _c;\n\n$RefreshReg$(_c, \"WidgetMessage\");","map":{"version":3,"sources":["C:/Users/alini/Documents/repository/blog-reactjs-lini/src/components/chatbot-widget/messages-input.js"],"names":["React","useState","useCallback","sendRasaPost","message","sendMessage","requestOptions","method","headers","body","JSON","stringify","sender","response","fetch","data","json","Promise","resolve","setTimeout","console","log","i","length","text","event","error","WidgetMessage","setMessage","submitMessage","handleChange","received_message","target","value","handleKeyPress","key"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nconst sendRasaPost = async (message, sendMessage) => {\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ message:  message, sender: 123 })\n    };\n  \n    try {\n      const response = await fetch('https://kiki-assistant.herokuapp.com/webhooks/rest/webhook', requestOptions);\n      const data = await response.json();  \n  \n      await new Promise((resolve) => setTimeout(resolve, 3000));\n  \n      console.log(data[0])\n      for (var i = 0; i < data.length; i++) {\n        sendMessage({\n          message: data[i].text,\n          event: 'bot'\n        })\n      }\n  \n    } catch (error) {\n      console.error(error)\n    }\n  }\n\nconst WidgetMessage = ({sendMessage}) => {\n    // Recebe o objeto e o método que altera o valor do objeto\n    const [message, setMessage] = useState('')\n  \n    // useCallback cacheia a função e se atualiza quando os elementos\n    // passados na última propriedade, alteram de estado.\n    const submitMessage = useCallback(() => {\n      sendMessage({ \n        message: message,\n        event: 'user'\n      })\n  \n      sendRasaPost(message, sendMessage)\n  \n      setMessage('') \n    }, [message, sendMessage]);\n  \n  \n    const handleChange = useCallback((event) => {\n      const received_message = event.target.value\n      setMessage(received_message)\n    }, [])\n  \n  \n    const handleKeyPress = useCallback((event) => {\n      if(event.key === 'Enter'){\n        submitMessage()\n      }\n    }, [submitMessage])\n  \n    return (\n      <nav className=\"navbar navbar-expand-md keypad\">\n        <div className=\"navbar-left\">\n          <input\n              type=\"text\"\n              className=\"usrInput\"\n              name=\"received_message\"\n              id=\"userInput\"\n              autoComplete=\"off\"\n              placeholder=\"Escreva uma mensagem...\"\n              onChange={handleChange} \n              onKeyPress={handleKeyPress} \n              value={message}/>\n        </div>\n        <div className=\"send_button\">\n          <ul className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <i \n                onClick={submitMessage}\n                className=\"fa fa-paper-plane\">\n                </i>\n              </li>\n          </ul>\n        </div>\n      </nav>\n    )\n  }\n  \n\nexport default WidgetMessage"]},"metadata":{},"sourceType":"module"}